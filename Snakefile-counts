configfile: "config.yaml"

import glob


def read_samples():
    """Function to get names and fastq paths from a sample file specified
    in the configuration. Input file is expected to have 4 columns:
    <1000genomes_id> <unique_sample_id> <fastq1_path> <fastq2_path>. Modify
    this function as needed to provide a dictionary of sample_id keys and
    (fastq1, fastq1) values"""
    f = open(config['sample_file'], "r")
    samp_dict = {}
    for line in f:
        words = line.strip().split()
        samp_dict[words[1]] = ((words[2], words[3]), (words[4], words[5]))
    return samp_dict


def read_1kg_samples():
    f = open(config['sample_file'], "r")
    samp_dict = {}
    for line in f:
        words = line.strip().split()
        samp_dict[words[1]] = words[0]

    return samp_dict


SAMP_TO_1KG = read_1kg_samples()


"""WASP needs some config values. Let's load them, so the user doesn't
have to."""
config['vcf_dir'] = config['output_dir'] + "/genotypes"
config['snp_h5_dir'] = config['output_dir'] + "/genotypes/snp_h5"


rule all:
    input:
        expand(config['output_dir'] + "/as_counts/{sample}.as_counts.txt.gz",
               sample=read_samples().keys())


rule split_vcf_by_sample:
    """Create VCF files for each sample from a single VCF file"""
    input:
        ref = config['ref_genome'],
        vcf = rules.apply_variant_filter.output
    output:
        config['output_dir'] + "/extract_gq/{sample}.vcf.gz"
    shell:
        "gatk SelectVariants -R {input.ref} -V {input.vcf} "
        "-sn {wildcards.sample} -O {output}"

rule create_gq_files:
    """Create tables containing GQ scores for each sample. The files will have
    columns: CHROM, POS, REF, ALT, and {sample}.GQ"""
    input:
        ref = config['ref_genome'],
        vcf = expand(rules.split_vcf_by_sample.output, sample=read_samples().keys())
    output:
        config['output_dir'] + "/extract_gq/{sample}.gq_subset.table"
    shell:
        "gatk VariantsToTable -R {input.ref} -V {input.vcf} "
        "-F CHROM -F POS -F REF -F ALT -GF GQ "
        "-O {output}"

rule vcf2h5:
    """Convert VCF data files to HDF5 format"""
    input:
        chrom = config['chrom_info'],
        vcfs = rules.split_final_vcf.output
    output:
        snp_index = config['snp_h5_dir'] + "/snp_index.h5",
        snp_tab = config['snp_h5_dir'] + "/snp_tab.h5",
        haplotype = config['snp_h5_dir'] + "/haplotype.h5"
    shell:
        "mkdir -p {config[snp_h5_dir]}; "
        "{config[wasp_dir]}/snp2h5/snp2h5 "
        "  --chrom {input.chrom} "
        "  --format vcf "
        "  --snp_index {output.snp_index} "
        "  --snp_tab {output.snp_tab} "
        "  --haplotype {output.haplotype} "
        "  {input.vcfs}"

rule get_as_counts:
    """get allele-specific read counts for SNPs"""
    input:
        bam = config['output_dir'] + "/rmdup/{sample}.keep.merge.rmdup.sort.bam",
        snp_index = config["snp_h5_dir"] + "/snp_index.h5",
        snp_tab = config["snp_h5_dir"] + "/snp_tab.h5",
        haplotype = config['snp_h5_dir'] + "/haplotype.h5",
    params:
        samp1kg = lambda wildcards: SAMP_TO_1KG[wildcards.sample]
    output:
        config['output_dir'] + "/as_counts/{sample}.as_counts.txt.gz"
    shell:
        "mkdir -p {config[output_dir]}/as_counts ; "
        "{config[py2]} {config[wasp_dir]}/mapping/get_as_counts.py "
        "  --snp_tab {input.snp_tab} "
        "  --snp_index {input.snp_index} "
        "  --haplotype {input.haplotype} "
        "  --samples {config[sample_file]} "
        "  --genotype_sample {params.samp1kg} "
        "  {input.bam} | gzip > {output}"

rule detect_imbalance:
    """quantify allelic imbalance in genes for each sample"""
    input:
        dna_counts = config['output_dir'] + "/as_counts/{sample}.as_counts.txt.gz"
        rna_counts = config['output_dir'] + "/as_counts/{sample}.as_counts.txt.gz"
        gene_info = config['gene_info']
        gq_file = rules.create_gq_files.output
    params:
        output_dir = config['output_dir'] + "/"
    output:
        config['output_dir'] + "/final/{sample}.res.csv"
    shell:
        "mkdir -p {config[output_dir]}/final; "
        "Rscript --no-save --no-restore --verbose find_imbalance.r "
        "{wildcards.sample} {input.dna_counts} "
        "{input.rna_counts} {input.gene_info} "
        "{input.gq_file} {input.output_dir}"
