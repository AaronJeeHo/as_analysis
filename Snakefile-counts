configfile: "config-counts.yaml"

import glob


def read_samples():
    """Function to get names and fastq paths from a sample file specified
    in the configuration. Input file is expected to have 4 columns:
    <1000genomes_id> <unique_sample_id> <dna_bam_path> <rna_bam_path>. Modify
    this function as needed to provide a dictionary of sample_id keys and
    (dna_bam_path, rna_bam_path) values"""
    f = open(config['sample_file'], "r")
    samp_dict = {}
    for line in f:
        words = line.strip().split()
        samp_dict[words[1]] = (words[2], words[3])
    return samp_dict


def read_1kg_samples():
    f = open(config['sample_file'], "r")
    samp_dict = {}
    for line in f:
        words = line.strip().split()
        samp_dict[words[1]] = words[0]
    return samp_dict

SAMP_TO_1KG = read_1kg_samples()


rule all:
    input:
        expand(config['output_dir'] + "/final/{sample}/result.csv",
               sample=read_samples().keys())

# run the following to execute the pipeline:
# out_path="/iblm/netapp/home/amassarat/allele_specific_analysis/snakemake/out"; snakemake -s Snakefile-counts --cluster "qsub -t 1 -V -q iblm.q -j y -o ${out_path}/qout" -j 24 --config output_dir=${out_path} --use-conda >>${out_path}/out 2>&1 &

rule split_vcf_by_sample:
    """Create VCF files for each sample from a single VCF file"""
    input:
        ref = config['ref_genome'],
        vcf = config['vcf_file']
    output:
        config['output_dir'] + "/extract_gq/{sample}.vcf.gz"
    shell:
        "{config[gatk]} SelectVariants -R {input.ref} -V {input.vcf} "
        "-sn {wildcards.sample} -O {output}"

rule create_gq_files:
    """Create tables containing GQ scores for each sample. The files will have
    columns: CHROM, POS, REF, ALT, and {sample}.GQ"""
    input:
        ref = config['ref_genome'],
        vcf = rules.split_vcf_by_sample.output
    output:
        config['output_dir'] + "/extract_gq/{sample}.gq_subset.table"
    shell:
        "{config[gatk]} VariantsToTable -R {input.ref} -V {input.vcf} "
        "-F CHROM -F POS -F REF -F ALT -GF GQ "
        "-O {output}"

rule split_vcf_by_chr:
    """Split the provided VCF file by chromosome and gzip it for WASP"""
    input:
        vcf = config['vcf_file']
    output:
        dynamic(config['output_dir'] + "/genotypes/ALL.chr{chr_num}.vcf.gz")
    shell:
        "{config[SnpSift]} split {input} && "
        "gzip {config[output_dir]}/genotypes/*.vcf"

rule vcf2h5:
    """Convert VCF data files to HDF5 format"""
    input:
        chrom = config['chrom_info'],
        vcfs = rules.split_vcf_by_chr.output
    output:
        snp_index = config['snp_h5_dir'] + "/snp_index.h5",
        snp_tab = config['snp_h5_dir'] + "/snp_tab.h5",
        haplotype = config['snp_h5_dir'] + "/haplotype.h5"
    shell:
        "mkdir -p {config[snp_h5_dir]} && "
        "{config[wasp_dir]}/snp2h5/snp2h5 "
        "  --chrom {input.chrom} "
        "  --format vcf "
        "  --snp_index {output.snp_index} "
        "  --snp_tab {output.snp_tab} "
        "  --haplotype {output.haplotype} "
        "  {input.vcfs}"

rule get_as_counts:
    """get allele-specific read counts for SNPs"""
    input:
        dna_bam = lambda wildcards: read_samples()[wildcards.sample][0],
        rna_bam = lambda wildcards: read_samples()[wildcards.sample][1],
        snp_index = rules.vcf2h5.output.snp_index,
        snp_tab = rules.vcf2h5.output.snp_tab,
        haplotype = rules.vcf2h5.output.haplotype,
    params:
        samp1kg = lambda wildcards: SAMP_TO_1KG[wildcards.sample]
    output:
        dna = config['output_dir'] + "/as_counts/{sample}/dna.as_counts.txt.gz",
        rna = config['output_dir'] + "/as_counts/{sample}/rna.as_counts.txt.gz"
    conda: "envs/pytables2.yaml"
    shell:
        "mkdir -p {config[output_dir]}/as_counts/{wildcards.sample} && "
        "{config[py2]} {config[wasp_dir]}/mapping/get_as_counts.py "
        "  --snp_tab {input.snp_tab} "
        "  --snp_index {input.snp_index} "
        "  --haplotype {input.haplotype} "
        "  --samples {config[sample_file_WASP]} "
        "  --genotype_sample {params.samp1kg} "
        "  {input.dna_bam} | gzip > {output.dna} && "
        "{config[py2]} {config[wasp_dir]}/mapping/get_as_counts.py "
        "  --snp_tab {input.snp_tab} "
        "  --snp_index {input.snp_index} "
        "  --haplotype {input.haplotype} "
        "  --samples {config[sample_file_WASP]} "
        "  --genotype_sample {params.samp1kg} "
        "  {input.rna_bam} | gzip > {output.rna}"

rule create_sample_file:
    """create a sample file for rules.detect_imbalance, where for each sample,
    there is a sample_name, dna_counts_file, rna_counts_file, and gq_file"""
    input:
        dna_counts = expand(rules.get_as_counts.output.dna,
                            sample=read_samples().keys()),
        rna_counts = expand(rules.get_as_counts.output.rna,
                            sample=read_samples().keys()),
        gq_file = expand(rules.create_gq_files.output,
                         sample=read_samples().keys())
    params:
        samples = list(read_samples().keys())
    output:
        config['output_dir'] + "/final/samples.txt"
    run:
        shell("mkdir -p " + config['output_dir'] + "/final")
        sample_file = open(output[0], 'w+')
        for i in range(len(params.samples)):
            sample_file.write(" ".join([params.samples[i], input.dna_counts[i], input.rna_counts[i], input.gq_file[i]]) + "\n")
        sample_file.close()

rule detect_imbalance:
    """quantify allelic imbalance in genes for each sample"""
    input:
        sample_file = rules.create_sample_file.output,
        gene_info = config['gene_info']
    params:
        output_dir = config['output_dir'] + "/final/"
    output:
        expand(config['output_dir'] + "/final/{sample}/dna.csv",
               sample=read_samples().keys()),
        expand(config['output_dir'] + "/final/{sample}/rna.csv",
               sample=read_samples().keys()),
        expand(config['output_dir'] + "/final/{sample}/result.csv",
               sample=read_samples().keys())
    shell:
        "{config[Rscript]} --no-save --no-restore find_imbalance.r "
        "{input.sample_file} {input.gene_info} {params.output_dir}"
