import glob
from pathlib import Path
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("5.18.0")


include: "snp2h5_rules.smk"

rule create_STAR_index:
    """create an index of the reference genome using STAR"""
    input:
        ref = lambda wildcards: config['ref_genome'],
        genes = config['gene_info']
    params:
        overhang = config['sjdbOverhang'] if 'sjdbOverhang' in config and \
            config['sjdbOverhang'] else 100
    output: directory(config['output_dir'] + "/ref_genome/star_index")
    conda: "../envs/default.yaml"
    benchmark: config['output_dir'] + "/benchmark/WASP/create_STAR_index/all.tsv"
    shell:
        "STAR --genomeDir {output} --runThreadN 1 "
        "--sjdbOverhang {params.overhang} --runMode genomeGenerate "
        "--genomeFastaFiles {input.ref} --sjdbGTFfile {input.genes}"

rule map_STAR1:
    """map reads using STAR"""
    input:
        fastq1 = lambda wildcards: SAMP2[wildcards.sample][0],
        fastq2 = lambda wildcards: SAMP2[wildcards.sample][1],
        index = config['ref_genome_star'] if 'ref_genome_star' in config and \
            config['ref_genome_star'] else rules.create_STAR_index.output
    params:
        prefix = config['output_dir'] + "/map1/{sample}/"
    output:
        temp(str(Path(config['output_dir']).absolute()) + "/map1/{sample}/Aligned.out.bam")
    conda: "../envs/default.yaml"
    benchmark: config['output_dir'] + "/benchmark/WASP/map_STAR1/{sample}.tsv"
    shell:
        "STAR --runThreadN 1 "
            "--genomeDir {input.index} "
            "--readFilesIn {input.fastq1} {input.fastq2} "
            "--readFilesCommand zcat "
            "--outSAMtype BAM Unsorted "
            "--alignEndsType EndToEnd "
            "--outFileNamePrefix {params.prefix}"

rule sort_and_index_bam1:
    """sort and index bam generated by first mapping step"""
    input:
        rules.map_STAR1.output
    output:
        bam = config['output_dir'] + "/map1_sort/{sample}.bam",
        index = config['output_dir'] + "/map1_sort/{sample}.bam.bai"
    conda: "../envs/default.yaml"
    benchmark: config['output_dir'] + "/benchmark/WASP/sort_and_index_bam1/{sample}.tsv"
    shell:
        "samtools sort -o {output.bam} {input} && "
        "samtools index {output.bam} && "
        "touch -c {output.bam}"

rule find_intersecting_snps:
    """find intersecting SNPs using WASP script"""
    input:
        bam = rules.sort_and_index_bam1.output.bam,
        snp_index = rules.vcf2h5.output.snp_index,
        snp_tab = rules.vcf2h5.output.snp_tab,
        haplotype = rules.vcf2h5.output.haplotype,
        find_intersecting_snps_script = rules.get_WASP.output.find_intersecting_snps_script
    params:
        sample_names = lambda wildcards: SAMP_TO_VCF_ID[wildcards.sample]
    output:
        fastq1 = config['output_dir'] + "/find_intersecting_snps/{sample}.remap.fq1.gz",
        fastq2 = config['output_dir'] + "/find_intersecting_snps/{sample}.remap.fq2.gz",
        keep_bam = temp(config['output_dir'] + "/find_intersecting_snps/{sample}.keep.bam"),
        remap_bam = config['output_dir'] + "/find_intersecting_snps/{sample}.to.remap.bam"
    conda: "../envs/default.yaml"
    benchmark: config['output_dir'] + "/benchmark/WASP/find_intersecting_snps/{sample}.tsv"
    shell:
        "python {input.find_intersecting_snps_script} "
            "--is_paired_end "
            "--is_sorted "
            "--output_dir {config[output_dir]}/find_intersecting_snps "
            "--snp_tab {input.snp_tab} "
            "--snp_index {input.snp_index} "
            "--haplotype {input.haplotype} "
            "--samples {params.sample_names} "
            "{input.bam}"

rule map_STAR2:
    """map reads a second time using STAR"""
    input:
        fastq1 = rules.find_intersecting_snps.output.fastq1,
        fastq2 = rules.find_intersecting_snps.output.fastq2,
        index = config['ref_genome_star'] if 'ref_genome_star' in config and \
            config['ref_genome_star'] else rules.create_STAR_index.output
    params:
        prefix = config['output_dir'] + "/map2/{sample}/"
    output:
        temp(str(Path(config['output_dir']).absolute()) + "/map2/{sample}/Aligned.out.bam")
    conda: "../envs/default.yaml"
    benchmark: config['output_dir'] + "/benchmark/WASP/map_STAR2/{sample}.tsv"
    shell:
        "STAR --runThreadN 1 "
            "--genomeDir {input.index} "
            "--readFilesIn {input.fastq1} {input.fastq2} "
            "--readFilesCommand zcat "
            "--outSAMtype BAM Unsorted "
            "--alignEndsType EndToEnd "
            "--outFileNamePrefix {params.prefix}"

rule sort_and_index_bam2:
    """sort and index bam generated by second mapping step"""
    input:
        rules.map_STAR2.output
    output:
        bam = config['output_dir'] + "/map2_sort/{sample}.bam",
        index = config['output_dir'] + "/map2_sort/{sample}.bam.bai"
    conda: "../envs/default.yaml"
    benchmark: config['output_dir'] + "/benchmark/WASP/sort_and_index_bam2/{sample}.tsv"
    shell:
        "samtools sort -o {output.bam} {input} && "
        "samtools index {output.bam} && "
        "touch -c {output.bam}"

rule filter_remapped_reads:
    """filter reads from second mapping step"""
    input:
        to_remap_bam = rules.find_intersecting_snps.output.remap_bam,
        remap_bam = rules.sort_and_index_bam2.output.bam,
        filter_remapped_reads_script = rules.get_WASP.output.filter_remapped_reads_script
    output:
        temp(config['output_dir'] + "/filter_remapped_reads/{sample}.keep.bam")
    conda: "../envs/default.yaml"
    benchmark: config['output_dir'] + "/benchmark/WASP/filter_remapped_reads/{sample}.tsv"
    shell:
        "python {input.filter_remapped_reads_script} "
        "{input.to_remap_bam} {input.remap_bam} {output}"

rule sort_filtered_bam:
    """sort 'keep' BAM file from rules.filter_remapped_reads for rules.rmdup_pe"""
    input:
        rules.filter_remapped_reads.output
    output:
        config['output_dir'] + "/filter_remapped_reads/{sample}.keep.sort.bam"
    conda: "../envs/default.yaml"
    benchmark: config['output_dir'] + "/benchmark/WASP/sort_filtered_bam/{sample}.tsv"
    shell:
        "samtools sort -o {output} {input} && "
        "samtools index {output}"

rule rmdup:
    """remove duplicate read pairs"""
    input:
        bam = rules.sort_filtered_bam.output,
        rmdup_script = rules.get_WASP.output.rmdup_script
    output:
        rmdup = temp(config['output_dir'] + "/rmdup/{sample}.keep.rmdup.bam"),
        sort = config['output_dir'] + "/rmdup/{sample}.keep.rmdup.sort.bam"
    conda: "../envs/default.yaml"
    benchmark: config['output_dir'] + "/benchmark/WASP/rmdup_pe/{sample}.tsv"
    shell:
        "python {input.rmdup_script} {input.bam} {output.rmdup} && "
        "samtools sort -o {output.sort} {output.rmdup} && "
        "samtools index {output.sort} && "
        "touch -c {output.sort}"
